PUBLIC_URL = "https://konstantinastoikou.github.io/dataviz/";

d3.csv(
  "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-12/fish-stocks-within-sustainable-levels.csv",
  function (d) {
    // process data
    return {
      location: d.Entity,
      year: d.Year,
      overexploited: parseInt(d["Share of fish stocks that are overexploited"]),
      sustainable: parseInt(
        d[
          "Share of fish stocks within biologically sustainable levels (FAO, 2020)"
        ]
      ),
    };
  },
  function (data) {
    var cur_year = "2017";
    var overexploitedChart = Highcharts.chart("container-overexploited", {
      chart: {
        height: 250,
        type: "solidgauge",
      },

      title: {
        text: "Overexploited share of fish stocks",
        margin: 0,
      },

      subtitle: {
        text: "Year 2017 (No data available for 1950)",
      },

      pane: {
        center: ["50%", "85%"],
        size: "150%",
        startAngle: -90,
        endAngle: 90,
        background: {
          backgroundColor:
            Highcharts.defaultOptions.legend.backgroundColor || "#EEE",
          innerRadius: "60%",
          outerRadius: "100%",
          shape: "arc",
        },
      },

      exporting: {
        enabled: false,
      },

      credits: {
        enabled: false,
      },

      tooltip: {
        enabled: false,
      },

      // the value axis
      yAxis: {
        stops: [
          [0.1, "#55BF3B"], // green
          [0.5, "#DDDF0D"], // yellow
          [0.9, "#DF5353"], // red
        ],
        lineWidth: 0,
        tickWidth: 0,
        minorTickInterval: null,
        tickAmount: 2,
        title: {
          y: -110,
        },
        labels: {
          y: 16,
        },
        min: 0,
        max: 100,
      },

      plotOptions: {
        solidgauge: {
          dataLabels: {
            y: 5,
            borderWidth: 0,
            useHTML: true,
          },
        },
      },

      series: [
        {
          name: "Overexploited",
          data: [
            {
              y: data.filter(
                (x) => x.location === "World" && x.year === cur_year
              )[0].overexploited,
              sust: data.filter(
                (x) => x.location === "World" && x.year === cur_year
              )[0].sustainable,
            },
          ],
          dataLabels: {
            formatter: function () {
              return (
                '<div style="text-align:center">' +
                '<span style="font-size:25px">' +
                this.y +
                '%</span><br/><span style="font-size:12px">overexploited</span><br/>' +
                '<span style="font-size:12px;opacity:0.4">' +
                this.point.options.sust +
                "% sustainable</span>" +
                "</div>"
              );
            },
          },
        },
      ],
    });

    var region = document.getElementById("region");

    region.addEventListener("change", function () {
      var point, newVal;

      var value = parseInt($("#play-range")[0].value);

      point = overexploitedChart.series[0].points[0];
      if (region.value === "World") {
        newVal = data.filter(
          (x) => x.location === region.value && x.year === value
        )[0];
        if (newVal) {
          point.update({
            y: newVal.overexploited,
            sust: newVal.sustainable,
          });
          overexploitedChart.update({
            subtitle: { text: "Year " + value },
          });
          cur_year = value;
        } else {
          overexploitedChart.update({
            subtitle: {
              text:
                "Year " + cur_year + " (No data available for " + value + ")",
            },
          });
        }
      } else {
        newVal = data.filter(
          (x) => x.location === region.value && x.year === "2017"
        )[0];
        point.update({
          y: newVal.overexploited,
          sust: newVal.sustainable,
        });
        if (value === 2017) {
          overexploitedChart.update({
            subtitle: { text: "Year " + value },
          });
        } else {
          overexploitedChart.update({
            subtitle: {
              text: "Year 2017 (No data available for " + value + ")",
            },
          });
        }
      }

      const img = document.querySelector("#map-img");

      img.src = PUBLIC_URL + "images/fishing_areas/" + region.value + ".jpg";
    });

    function update(increment) {
      var input = $("#play-range")[0];

      var value = parseInt(input.value);
      if (increment) {
        value += increment;
      }

      point = overexploitedChart.series[0].points[0];
      if (region.value === "World") {
        newVal = data.filter(
          (x) => x.location === region.value && x.year === String(value)
        )[0];
        if (newVal) {
          point.update({
            y: newVal.overexploited,
            sust: newVal.sustainable,
          });
          overexploitedChart.update({
            subtitle: { text: "Year " + value },
          });
          cur_year = value;
        } else {
          overexploitedChart.update({
            subtitle: {
              text:
                "Year " + cur_year + " (No data available for " + value + ")",
            },
          });
        }
      } else {
        newVal = data.filter(
          (x) => x.location === region.value && x.year === "2017"
        )[0];
        point.update({
          y: newVal.overexploited,
          sust: newVal.sustainable,
        });
        if (value === 2017) {
          overexploitedChart.update({
            subtitle: { text: "Year " + value },
          });
        } else {
          overexploitedChart.update({
            subtitle: {
              text: "Year 2017 (No data available for " + value + ")",
            },
          });
        }
      }
    }

    function play() {
      overexploitedChart.sequenceTimer = setInterval(function () {
        update(1);
      }, 700);
    }

    function pause() {
      clearTimeout(overexploitedChart.sequenceTimer);
      overexploitedChart.sequenceTimer = undefined;
    }

    $("#play-pause-button").bind("click", function () {
      if (overexploitedChart.sequenceTimer === undefined) {
        play(this);
      } else {
        pause(this);
      }
    });

    $("#play-range").bind("input", function () {
      update();
    });
  }
);
